<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The MuppetGate Conspiracy</title><link href="http://muppetgate.github.io/" rel="alternate"></link><link href="http://muppetgate.github.io/feeds/technology.atom.xml" rel="self"></link><id>http://muppetgate.github.io/</id><updated>2015-05-12T07:22:00+02:00</updated><entry><title>Microsoft and the Road to OS/2</title><link href="http://muppetgate.github.io/microsoft-and-the-road-to-os2.html" rel="alternate"></link><updated>2015-05-12T07:22:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-05-12:microsoft-and-the-road-to-os2.html</id><summary type="html">&lt;p&gt;Read a great article on &lt;a href="http://arstechnica.co.uk/information-technology/2015/05/android-and-ios-apps-on-windows-what-is-microsoft-doing-and-will-it-work/"&gt;Ars Technica&lt;/a&gt; the other day, which talked about Microsoft's plans to fix the app drought on Windows  by becoming a universal platfrom. The article is well worth a look (along with the comments!), but the gist of it is that Redmond is going to attack the problem from two sides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows for Phones will allow a subset of Android applications to run inside a sandboxed container. What they mean by a 'subset' is anyone's guess right now, but I imagine stuff that needs to run close to the metal will be a non-starter. Microsoft will also be intercepting calls to Google services and replacing them with their own. (Cheeky!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft will be releasing tools to make it easier for developers to port iOS apps to Windows for Phones. Again, we'll have to wait and see what real-world results look like. I'm not a fan of ported apps myself, but if the code was engineered with proper separation of the UI from the engine underneath then Microsoft's tools should make the job easier without impacting  too badly on the user experience. Time will tell.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I first read about this, my initial thought was: &lt;em&gt;How the hell has it come to this?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;On the surface (no pun intended) this looks like an admission of defeat: &lt;em&gt;No one is writing apps for our platform so we've no choice but to entice developers from Android and iOS.&lt;/em&gt; It's quite a fall for the mighty Microsoft, but it is what it is. I remember a similar feeling when Steve Jobs went on stage and announced that &lt;a href="http://www.mac-history.net/apple-history-tv/2008-07-19/macworld-boston-1997-steve-jobs-returns-bill-gates-appeares-on-screen"&gt;Redmond was Apple's new best friend&lt;/a&gt;. The difference back then was that the Apple faithful were up in arms over the deal; this time round, the mood of  Microsoft fans is something closer to a grumbling acceptance.&lt;/p&gt;
&lt;p&gt;What was, was. This is the reality we're dealing with now, and for tackling that head-on I think Satya Nadella deserves a round of applause.&lt;/p&gt;
&lt;p&gt;Still, the new development strategy isn't without risks, and the elephant-in-the-breakout-area was succintly exposed in the Ars Technica article: Didn't IBM try this with OS/2?&lt;sup id="sf-microsoft-and-the-road-to-os2-1-back"&gt;&lt;a title="A potted history of OS/2 is available here. Well worth a read!" class="simple-footnote" href="#sf-microsoft-and-the-road-to-os2-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Running Windows software on OS/2 was supposed to provide an incentive to IBM's customers. (It runs Windows software, so where's the risk?). What it actually did was discourage native development. (It runs Windows software, why waste effort writing native software for it?)&lt;/p&gt;
&lt;p&gt;I'm sure that Nadella is well aware of OS/2's history, and so I'm sure he is aware of the risks involved in running Android apps in much the same way. Still, needs must – and there is a possible hidden benefit: If successful, would this scheme slow development on iOS? If you could target two successful platforms with your Android app, then why not develop there first? It's a thought for a possible future; Windows on the Phone would need to come close to matching the iOS installed base for that to happen.&lt;/p&gt;
&lt;p&gt;However, Microsoft's first prong – tools to port from iOS – is not your mother's OS/2 strategy. Windows Phone will not be running iOS apps in a subsystem because that would be a disaster for the platform as a whole. The idea is that if iOS developers can port their apps easily then why wouldn’t they? 
Well, supporting a platform is more than just writing code for it. You need to understand its underpinnings to get the best out of it; you need to understand how it interacts with its user and the other applications installed on the phone. You need to understand what could be causing it to crash when the unported code runs fine elsewhere.It'll need a high level of skill to make sure that your ported application doesn't &lt;em&gt;look&lt;/em&gt; like a ported application.&lt;/p&gt;
&lt;p&gt;In short, nothing's changed: You'll still need to a damn good understanding of every platform your app is running on.&lt;/p&gt;
&lt;p&gt;So lots of little things, but it's a start.&lt;/p&gt;
&lt;p&gt;I do wonder, however, if there was an alternative.&lt;/p&gt;
&lt;p&gt;Instead of trying to bring developers to your platform, why not cast your API out to all developers? Microsoft has decades of cross-platform experience which they must be using internally. Why not build the frameworks to run on iOS and Android? For one thing it would be a reward for their own developer community who have waited (not always patiently) for Microsoft to get their mobile act together.&lt;/p&gt;
&lt;hr&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-microsoft-and-the-road-to-os2-1"&gt;A potted history of OS/2 is available &lt;a href="http://techland.time.com/2012/04/02/25-years-of-ibms-os2-the-birth-death-and-afterlife-of-a-legendary-operating-system/"&gt;here&lt;/a&gt;. Well worth a read! &lt;a class="simple-footnote-back" href="#sf-microsoft-and-the-road-to-os2-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="Microsoft"></category><category term="Apple"></category><category term="Android"></category></entry><entry><title>Lightning is Here to Stay</title><link href="http://muppetgate.github.io/lightning-is-here-to-stay.html" rel="alternate"></link><updated>2015-04-26T23:06:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-04-26:lightning-is-here-to-stay.html</id><summary type="html">&lt;p&gt;The press loves to talk about Apple. Whether it's their lastest bit of kit, the price of their latest bit of kit, the number of women serving on their board . . . it doesn't matter. Apple generates hits.&lt;/p&gt;
&lt;p&gt;Trouble is, in their rush to generate ad clicks, the popular IT press not only miss the subtler points, they often miss the plainly obvious.&lt;/p&gt;
&lt;p&gt;In the last week, Apple announced the rather gorgeous &lt;a href="http://www.apple.com/macbook/"&gt;Macbook&lt;/a&gt;, a laptop so thin it ships with shaving foam. Aside from its size and lack of power, the press has also been drawn to the single USB-C port that, in their mind, signifies the end of the lightning interface.&lt;/p&gt;
&lt;p&gt;'Why does Apple need Lightning,' the popular IT press cries, 'when they have something almost as good and a lot more universal like USB-C?' &lt;/p&gt;
&lt;p&gt;Well, I think there are a couple of reasons, the most important of which (to Apple anyway) is size. USB-C is dinky, but the lightning connector is dinkier still.&lt;/p&gt;
&lt;p&gt;&lt;img alt="USB-C and lightning compared" src="http://muppetgate.github.io/assets/images/usb-c_sizecompare.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;And when you're as size-obsessed as Apple, then those few extra millimetres make all the difference. There is also the question of money. Compared to the money it prints selling iPhones, the &lt;a href="https://developer.apple.com/programs/mfi/"&gt;MFI&lt;/a&gt; programme is, no doubt, a drop in the ocean. But to a company as obsessed with detail as Apple, every drop counts.&lt;/p&gt;
&lt;p&gt;Apple recently detailed future plans for the lightning connector at its recent &lt;a href="http://9to5mac.com/2014/11/18/apple-mfi-summit-third-party-products-lightning-port-new-accessories/"&gt;MFI Summit held in China&lt;/a&gt;. The main takeaway was an extension to the programme that will allow third-party vendors to build lightning ports into their own devices. Cupertino also announceed a new low-profile connector which would be suitable for smaller devices such as battery cases.&lt;/p&gt;
&lt;p&gt;And while all this was going on, Apple was heavily involved in defining the USB-C spec, making sure they had a say in what goes at the other end of the cable. &lt;/p&gt;
&lt;p&gt;Lightning is something of a smart cable; to ensure its longevity, Apple made the pin assigments programmable, allowing it to adapt to whatever interface came along in the future. &lt;/p&gt;
&lt;p&gt;So rather than USB-C signalling the end of Lightning, I think it is merely another interface that Lightning was designed to cope with.&lt;/p&gt;</summary><category term="Technology"></category><category term="Apple"></category></entry></feed>