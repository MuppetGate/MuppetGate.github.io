<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The MuppetGate Conspiracy</title><link href="http://muppetgate.github.io/" rel="alternate"></link><link href="http://muppetgate.github.io/feeds/all.atom.xml" rel="self"></link><id>http://muppetgate.github.io/</id><updated>2016-02-25T07:07:00+01:00</updated><entry><title>The Jetbrains Subscription Aftermath</title><link href="http://muppetgate.github.io/the-jetbrains-subscription-aftermath.html" rel="alternate"></link><updated>2016-02-25T07:07:00+01:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2016-02-25:the-jetbrains-subscription-aftermath.html</id><summary type="html">&lt;p&gt;Last year, Jetbrains (makers of arguably the world's best IDE toolset) dropped a bombshell when it announced that it was &lt;a class="reference external" href="http://muppetgate.github.io/the-jetbrains-subscription-bloodbath.html"&gt;moving to a subscription model&lt;/a&gt; – just like Microsoft, just like Adobe. The uproar was expected, though I think even Jetbrains was taken aback by the level of vitriol smeared over its forums for weeks afterward. Unsurprisingly, folk don't like paying for subscription software; they don't like to feel they're being &lt;em&gt;forced&lt;/em&gt; to pay for subscription software.
So Jetbrains came up with Subscription MkII, or what they like to call the &lt;a class="reference external" href="https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-perpetual-fallback-license-"&gt;Perpetual Fallback License&lt;/a&gt;. It was somewhat better as it offered the option to stop paying the subscription after a year and then keep the version of the software you were using when you took out the subscription; essentially you get to keep a version of the software that was a year old… and so the vitriol continued.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Who the hell wants to keep software that's a year out of date?&lt;/em&gt; came the cries. Well, you don't have to… as long as you keep your subs up to date.&lt;/p&gt;
&lt;p&gt;Jetbrains stuck to its guns, and I think it came as no great surprise to anyone when the outrage died back to a vague rumble of discontent. For me, the subscription model is a win-win. I was paying a yearly upgrade fee anyway, and now, for the same price, I get all the other IDEs (PyCharm, RubyMine, AppCode, Webstorm…) thrown in.&lt;/p&gt;
&lt;p&gt;So aside from the licensing, has anything really changed? No, not really. It's still the best IDE toolset money can buy (yearly) in my opinion, and the list of outstanding bugs is still long enough to reach Mars and shows no sign of shrinking; this is a shame because I was hoping that without having to worry about implementing new features to keep people buying their products, Jetbrains would take the time to clear some of those outstanding issues.&lt;/p&gt;
&lt;p&gt;Now I think about it though, there is something a little different: the friendly product icons have gone and have been replaced by corporate Adobecons: garishly-coloured and incomprehensible smudges that make your eyes water if you look at them for too long. I miss the days when the Pycharm icon was a snake.&lt;/p&gt;
&lt;p&gt;Snake -&amp;gt; Python -&amp;gt; PyCharm.&lt;/p&gt;
&lt;p&gt;It was so simple…&lt;/p&gt;
</summary><category term="Technology"></category><category term="Software"></category><category term="Jetbrains"></category></entry><entry><title>Is Swift really Python under a funky new skin?</title><link href="http://muppetgate.github.io/is-swift-really-python-under-a-funky-new-skin.html" rel="alternate"></link><updated>2016-01-21T07:07:00+01:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2016-01-21:is-swift-really-python-under-a-funky-new-skin.html</id><summary type="html">&lt;p&gt;Not quite sure how this conversation came about, but I got into an online chat with a fellow developer over the underpinnings of the Swift programming language. I always thought that it took most of its cues from Scala and C#, with perhaps a passing not towards Jetbrain's fledgling Kotlin language.&lt;/p&gt;
&lt;p&gt;'Nope,' the other guy said. 'This Swift language has Python written right through it.'&lt;/p&gt;
&lt;p&gt;Have to say, I wasn't really convinced. I mean the most obvious difference is that Swift doesn't rely on indention to ascertain semantic rules.&lt;/p&gt;
&lt;p&gt;But my learned colleague assured me that was just superficial: 'That's just compiler stuff; you have to look much deeper.'&lt;/p&gt;
&lt;p&gt;After a few minutes though, I could see what he was driving at. When you look at the design of a programming language, you need to go beyond the statements and the symbols and look deeply at what the language designers were trying to achieve. In this regard, the designers of Python and Swift shared the same goal: simplicity. One of the credos I keep running across in the Python forums is that wherever possible there should be just one way to do one thing. This idea keeps the language clean and simple. Now, Swift may look different, but the recent decisions they've take for Version 3 of the language makes me think that they want to bring it closer to the ideals that Python was created under. For example, rather than adding features to the language, it looks like the Cupertino mothership is looking to take some out.&lt;/p&gt;
&lt;div class="section" id="exhibit-a-the-deprecated-decrement"&gt;
&lt;h2&gt;Exhibit A – The Deprecated Decrement&lt;/h2&gt;
&lt;p&gt;Most modern languages have shortcut operators for incrementing/decrementing values (usually something like ++ and --). Java has them. C# has them, and at the moment, Swift has them. But I'll tell you what language doesn't support increment/decrement operators: Python. They're a handy shortcut to be sure, but that's all they are: a shortcut. The problem from Apple's point of view is that the operators can lead to this sort of nonsense:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, it's valid code, but you can see how it'll cause something of a headache for the next programmer who has to come in and fix it. Besides which, there's a way to achieve the same results without making the code a nightmare to debug: just use the regular operators to add 1 to the variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will do the same job, and will be much easier to follow. This also maintains the notion of immutability. For a few years now, software development has been leaning towards functional programmming and the idea that any operation should return, as far as is possible, an immutable result. The problem with the increment/decrement operator is that this notion of immutability is hidden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exhibit-b-the-stolen-curry"&gt;
&lt;h2&gt;Exhibit B – The Stolen Curry&lt;/h2&gt;
&lt;p&gt;The newer pseudo-functional languages, such as Scala and Kotlin, include short cuts to curry functions. Swift used the same double-bracket notion. The old code would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you know how currying works under the hood then the code probably isn't difficult to work out: The function &lt;strong&gt;curried(x)&lt;/strong&gt; will return another function that will use &lt;em&gt;x&lt;/em&gt; internally, take another parameter &lt;em&gt;y&lt;/em&gt; and return a &lt;em&gt;Float&lt;/em&gt; value. Okay, that's great if you know currying, but what if you're new to the concept? Remember that Swift is designed to be a teaching language as well as a systems language and an application language and a server-side language. The currying notation is going, and will be replaced by an explicit declaration of what is actually happening.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the function is explicity declared as taking an integer (&lt;em&gt;x&lt;/em&gt;) as a parameter and then returning a function that takes a string as a parameter returning a Float. And in the code we can see &lt;em&gt;explicitly&lt;/em&gt; that we are in fact returning a function. Yes, a little more verbose, but a lot easier for the layperson to see what's going on. Of course, the function is called in exactly the same way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;float_add&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See? The function call &lt;strong&gt;curried(10)&lt;/strong&gt; returns a function that is called with &lt;em&gt;5&lt;/em&gt; as a parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what-does-this-have-to-do-with-python"&gt;
&lt;h2&gt;So what does this have to do with Python?&lt;/h2&gt;
&lt;p&gt;Python is a language that favours simplicity and ease of understanding over brevity. Like Swift3, it doesn't have increment/decrement operators, and there is no shortcut to declaring curried functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;curried&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_addY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_addY&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So going forward Swift3 means you will have to write a few more extra lines of code, but six months down the line, when you read it again, chances are you'll understand what it's doing.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Technology"></category><category term="Software"></category><category term="Programming"></category></entry><entry><title>The Jetbrains Subscription Bloodbath</title><link href="http://muppetgate.github.io/the-jetbrains-subscription-bloodbath.html" rel="alternate"></link><updated>2015-09-27T07:07:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-09-27:the-jetbrains-subscription-bloodbath.html</id><summary type="html">&lt;p&gt;It's a lot like coming out of the bunker after a nuclear holocaust. Three weeks ago, Jetbrains, the purveyor of extraordinarily excellent development tools, announced that they were switching from &lt;a class="reference external" href="http://blog.jetbrains.com/blog/2015/09/03/introducing-jetbrains-toolbox/"&gt;perpetual licences to a subscription model&lt;/a&gt;. That's right, rather than buying a licence outright, you paid a regular fee (monthly or yearly) to keep using the product.&lt;/p&gt;
&lt;p&gt;As you would expect, the user base went nuts.
No, really, I've never seen anything quite like it.
The staff were accused of being crooks, of setting up the customer base for a future of infinite price hikes, of fattening up the company for a sale to Oracle, of screwing their customers, basically. Many declared they would rather use Eclipse or Netbeans than bend their knee before the Many-Faced Subscription God.&lt;/p&gt;
&lt;p&gt;Aside from the personal attacks, these folk did have a point. There were two fundamental flaws with this plan:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No one liked the idea (no pun intended) that they could no longer have a perpetual licence to keep. The notion that the sofware would stop working simply because you stopped your subscription was the anthesis of … well … EVERYTHING! For me personally, this wasn't a problem. I pay for the IntelliJ upgrade every year, and this includes the years when Jetbrains do not include any functionality I need. I ponied up for the Android stuff, even though I have no intention of developing for the Android platform. Why? Because I believe that, for the cost of a night out with the chaps in London, it was worth giving Jetbrains a financial boost in order that they can continue developing tools essential for me to develop code on numerous platforms without tearing my hair out. So the change to subscription model wasn't going to make any difference, except that everything now became much cheaper. However, the subscription did come with one huge caveat, which leads me to point number two …&lt;/li&gt;
&lt;li&gt;The software would require an internet connection to keep running. Every so often, the IDE 'phones home' to check that a subscription is valid. But what if the developer isn't connected to the net when the dial home falls due. What if he works in a government department with restricted net access? What if, as I found with Adobe Creative Cloud before I deinstalled the whole bloated mess, it just doesn't work very well?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So after the uproar, Jetbrains went away, sat in a room for a week, and came back with &lt;a class="reference external" href="http://blog.jetbrains.com/blog/2015/09/18/final-update-on-the-jetbrains-toolbox-announcement/"&gt;The New World Order ver. 2.0&lt;/a&gt;. And they seemed to address the two fundamental problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;After paying for a year, you get to keep the licence. Now this does come with one glaring condition: you keep the version you had at the start of the subscription. This means that any new functionality you have downloaded since the start of the subscription year would be removed. Yup, you'd be rolled back (though you get to keep maintenance versions containing bug fixes). More uproar. More wailing. More gnashing of teeth. Now there is a way around this: you simply pay for another year upfront and you get to keep the current version you have. This effectively makes the perpetual model twice as expensive as the the subscription model, so again, people aren't happy. Now, as much as they like to pretend they're objecting on some moral platform, morality doesn't really come into it. They said that they would rather pay more and keep the perpetual licence than sign up to a subscription; that is exactly what've got. What they're objecting to is paying much more than they wanted to. But, as Jetbrains promised, the choice is there. It's up to the individual to weigh up what suits them best. If you're not a frequent upgrader then pay for the perpetual license and skip a couple of versions (as you will have been doing anyway). If you're the sort of person (me!) who always wants the latest and greatest then the subscription model is the cheaper option.&lt;/li&gt;
&lt;li&gt;The 'phone home' thing is optional. You can install a licence yourself without the need for the internet. I imagine that would be quite a hassle if you're paying monthly though. Anyway, if that was a sticking point, it's gone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we're out of the bunker and I think Jetbrains will go ahead with this, no matter how many people claim that they will dump them as a company if they do. In order to push forward with new projects and maintain the old ones, the company needs to have a predictable revenue source. People paying one year and then skipping the next two doesn't really help with that. The initial announcement was poorly thought out and poorly handled. They should have cited their reasons before just dropping something like this on the community. Still, they've held up their hands, apologised and fixed the problems … so let's move on.&lt;/p&gt;
</summary><category term="Technology"></category><category term="Software"></category><category term="Jetbrains"></category></entry><entry><title>Apple Keynote . . . The Aftermath</title><link href="http://muppetgate.github.io/apple-keynote-the-aftermath.html" rel="alternate"></link><updated>2015-09-12T07:07:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-09-12:apple-keynote-the-aftermath.html</id><summary type="html">&lt;p&gt;It happened, the dust has settled, and after a few days mulling things over it's time to take a look at what the latest Apple keynote means in terms of Apple's future. Since Apple still has to rely on external suppliers, product information leaks out months before the actual keynote; nothing announced (new iphones, an effing big iPad and new AppleTV) was a great surprise, so instead of pouring over the specs, I'm going to look at a few key elements and see if we can glean the direction things are heading.&lt;/p&gt;
&lt;div class="section" id="lightning-is-here-to-stay"&gt;
&lt;h2&gt;Lightning is here to stay&lt;/h2&gt;
&lt;p&gt;Shouldn't really be a great surprise, but most pundits – &lt;a class="reference external" href="http://muppetgate.github.io/lightning-is-here-to-stay.html"&gt;well, perhaps not most&lt;/a&gt; – were predicting that Apple would bin the Lightining connector in favour of USB-C. This was unlikely to happen because the Lightning connector has a number of advantages over USB-C; it's smaller for a start, and gives Apple control of the stuff that gets plugged into their devices (more or less).&lt;/p&gt;
&lt;img alt="The new Apple Pencil" class="align-center" src="http://muppetgate.github.io/assets/images/apple_pencil.jpeg" /&gt;
&lt;p&gt;Yup, looks a lot like a lightning connector to me. This is another interesting departure for Apple: the connector is being used to charge the device. What I expected to see was a lightning socket on the end of the pencil into which you would plug a lightning cable. Surely this would have been a lot more convenient since lightning cables are pretty common. Well, as far as I can tell, there are two reasons that Apple has taken this rather odd design decision.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Rather than hunting down a cable, you can charge your Pencil directly from the iPad Pro. Now personally, I think this would look a bit strange, which is why Apple won't be releasing pictures of anyone actually doing it. Fortunately, the Pencil will be shipping with some kind of cable dongle, so the iPad Pro charging method will just be for syncing for the first time and emergencies.&lt;/li&gt;
&lt;li&gt;Safety. If Apple had put a lightning socket (or a micro-USB or USB-C or whatever) at the end of the pencil, then they have no way of knowing what is being used to charge it. Folk will buy cheap, third-party cables which could damage the Pencil. The lightning connector is smart; it will know if it is being plugged into some unapproved piece of charging kit and can protect the pencil from damage. Any device that can be used for half and hour after only fifteen seconds of charging has to have some kind of internal smarts to protect it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-is-attacking-the-enterprise"&gt;
&lt;h2&gt;Apple is attacking the enterprise&lt;/h2&gt;
&lt;p&gt;During the keynote, Tim Cook went to great pains to point out that the iPad Pro is faster than 80% of the PCs shipped in the last year. That would not count the hardcore gamers, but it would certainly take in a fair chunk of the business market, and coupled with the Apple Pencil, it would capture a large proportion of the professional graphics market too.&lt;/p&gt;
&lt;img alt="The iPad Pro" class="align-center" src="http://muppetgate.github.io/assets/images/ipadPro.jpeg" /&gt;
&lt;p&gt;Taking into account their recent tie-ins with IBM and Cisco Systems, Apple is lining up its ducks for a push into the enterprise space. I wouldn't expect Apple to be planning for anything faster than a slow attrition; taking small victories in diverse areas. Contrary to popular belief, most companies get along fine with with their Windows setup, and I don't think this is going to suddenly change overnight.&lt;/p&gt;
&lt;p&gt;But with Apple making such great strides in performance, in terms of hardware and software, the oft-asked question has come up again: When will the company dump Intel and go its own way?&lt;/p&gt;
&lt;p&gt;My answer: Certainly not yet, and it's not even a question of technology; it's about perception. Folk are ready to accept that Apple can offer a viable alternative to Microsoft, but they don't believe that they can provide an alternative to Intel. Until we see more iPads being used in business and in the creation of high-end media, then people will be wary that the iGadgets won't meet their performance needs – and rightly so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-is-invading-the-living-room"&gt;
&lt;h2&gt;Apple is invading the living room&lt;/h2&gt;
&lt;p&gt;For the past year, I've been waging a lonely, one-man war against a magpie. As soon as Game Of Thrones comes on, he lands on the Sky dish and starts trying to strip the cabling. It's annoying beyond belief, and this is one of the reasons I'm so excited (I refuse to use the term 'super-excited'), about the new Apple TV.&lt;/p&gt;
&lt;img alt="The Apple TV" class="align-center" src="http://muppetgate.github.io/assets/images/appletv_2.png" /&gt;
&lt;p&gt;So what is it? Well, it's an iPad without a screen that plugs into your television set. It's a genius strategy because Apple has now declared that everything, everywhere is just another app:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Word processors&lt;/li&gt;
&lt;li&gt;To do lists&lt;/li&gt;
&lt;li&gt;Games&lt;/li&gt;
&lt;li&gt;Home gadget controllers&lt;/li&gt;
&lt;li&gt;TV channels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apple's main focus will be games and home automation control. The rest will take care of itself. The TV networks will supply their own apps to access their content alongside your regular subscription. Hey, you've paid already; why should they care how you choose to access it? For extras such as Sky Premiere, Apple will no doubt take a cut, and they won't really care which app you use. If you ask for the Mad Max movie, then Apple TV will show you which of the available apps will give it you. And if you can see the price of the download with each listing then that should spur a little competition in the network market.&lt;/p&gt;
&lt;p&gt;Recording programmes will be a thing of the past, since all content will stay available forever after it has been released. You can just watch it whenever you want, though you will want to see each Game of Thrones episode as soon as it's available. There's always some inconsiderate joker who want to talk about it in the office the next morning . . .&lt;/p&gt;
&lt;p&gt;For me, this was the high point of the keynote. I'd rather get my television via the internet, instead of an increasingly unreliable satellite dish.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Technology"></category><category term="Apple"></category></entry><entry><title>WWDC Keynote. The Good, the Bad . . . and the really Weird</title><link href="http://muppetgate.github.io/wwdc-keynote-the-good-the-bad-and-the-really-weird.html" rel="alternate"></link><updated>2015-06-09T05:41:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-06-09:wwdc-keynote-the-good-the-bad-and-the-really-weird.html</id><summary type="html">&lt;p&gt;So another WWDC keynote has come and gone. It definitely wasn't the polished effort of years past, and in places I think the audience was a little bored. (I know I was.)
Right off the bat, I think this was entirely the wrong place to launch the new music service. It needed an event on its own (or preferably, alongside a TV streaming service). Still, there was a lot interesting stuff going on, that was unfortunately raced through so that we could get to the Apple Music bit. Anyway, here are the parts that stood out for me:&lt;/p&gt;
&lt;h3&gt;The Good&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Metal comes to the Mac.&lt;/strong&gt; This is great news, and I love how the company leverages technology from one platform onto the others. Games have become a huge moneyspinner for the iPhone/iPad and it's good to see that Apple is keen to bring this success to the desktop. Could we see the Mac lose the 'crap for gaming' moniker it's been saddled with since Day One?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-tasking on the iOS.&lt;/strong&gt; Yes, I know: iOS has always had multi-tasking, but Apple are letting the users actually see it. Task-switching lifted straight from OSX and two app running side-by-side. Should be a long-overdue winner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swift goes open source.&lt;/strong&gt; This one was a no-brainer. There were a few new language features and compiler optimisations, but Craig Federighi shot through this section like his trousers were on fire. Still, good to see the Swift goodness will soon be available everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apple Music.&lt;/strong&gt; I didn't say I didn't like it; I just said that this was the wrong venue for the launch. Personally, I think it's huge. The service itself is nothing particularly new, but the focus they've given to unsigned acts is the game-changer. Apple is trying to do for the music world what the App Store did for small, independent developer. I'm hoping this will make it much easier to find and listen to something outside the production line acts that seem to have taken over. I'm actually surprised that the music industry would sign on with this. Sure they're getting their cut, but I wonder if they'll be this happy with it a few years down the line. 
I guess you could argue that this doesn't really cross into their space: they can go on manufacturing acts and will continue to make millions doing so.
Oh, and support for the Android platform? Didn't see that coming!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No new features for OSX.&lt;/strong&gt; Yes, this is a good thing. The fact that they didn't have any real whizz-bang features to announce for OSX El Capitan (doesn't exactly roll off the tongue, does it?) means that they (hopefully) have been taking time out to tighten things up a little. I haven't experienced too many problems myself, but I've heard a lot of complaints about the WiFi. It's always difficult to gauge how serious these problems are; the internet tends to be something of an echo chamber where Apple is concerned. From a user's perspective it's good; let's slow down, consolidate and look at what can be fixed/improved before we dump a whole new set of stuff to learn on to the customer base.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; No Apple TV update&lt;/strong&gt; Booo!! Though to be fair, they never promised one. Still, the whole Apple Music section did leave me with the impression that there was something missing, that a few other names (Iovine, Drake) had been rolled out at the last minute to fill some space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The very, very weird&lt;/h3&gt;
&lt;p&gt;Yeah, this was the strangest WWDC keynote I've seen in some time.  Jimmy Iovine came on and shouted, Drake came on and rambled, Eddy Cue came on and jigged about like a wannabe DJ. Something was a no-show at the last minute I'd say. But the question still stands: Why announce a music service at a developers conference?&lt;/p&gt;</summary><category term="Apple"></category><category term="technology"></category></entry><entry><title>But ... but ... I like type-checking!</title><link href="http://muppetgate.github.io/but-but-i-like-type-checking.html" rel="alternate"></link><updated>2015-06-01T19:36:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-06-01:but-but-i-like-type-checking.html</id><summary type="html">&lt;p&gt;Okay, I have a confession to make. I've thought long and hard about it, and I've decided that this something I can no longer hide from my friends and work colleagues. Some say that it's no one else's business, but I can't go on leading a double life.&lt;/p&gt;
&lt;p&gt;Ladies and gentlemen, for as long as I can remember I have been a supporter of strict type-checking. I've tried to sate my habit by indulging in a little type inference when no one's looking, but it's just not the same as having a compiler scour through your source code and shout 'a-ha!' when it comes across a dodgy assignment.&lt;/p&gt;
&lt;p&gt;True, a good programmer will spot these mistakes while he's typing, or later in the unit tests, or later still in the integration test, or perhaps when the system has gone live. The point is, at some point after the fact, the error is sure to be spotted.&lt;/p&gt;
&lt;p&gt;But for those of us less than perfect, the best way to prevent these simple snafus from seeing the light of day is to trap them during compilation.&lt;/p&gt;
&lt;p&gt;The problem is that dynamic languages are rarely compiled, and as much as I enjoy type-checking, I don't want to see it added to Python or Ruby at the cost of rapid development, conciseness and good clean coding fun.&lt;/p&gt;
&lt;p&gt;So what's the answer? Well, the clever people who oversee the Python language reckon they've come up with a fairly decent halfway house. Take a look at the following bit of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it's Python, under the new &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP0484&lt;/a&gt; which adds extensions for type checking. The function &lt;code&gt;greeting&lt;/code&gt; takes a parameter (name) which is of type &lt;code&gt;str&lt;/code&gt; and returns a &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Though, it's not really type-checking because Python isn't compiled. What you're looking at is &lt;em&gt;type hinting&lt;/em&gt;. The 'types' are not part of the Python language; they're a set of annotations that are part of an imported library which will allow for lint-type programs and analyzers to check code for sanity. I'm hoping that PyCharm will support this analysis at development time.&lt;/p&gt;
&lt;p&gt;Since this is entirely optional then you cannot call it type-checking. As it says in the PEP, it is just a way a hint to the runtime indicating what the type is supposed to be.&lt;/p&gt;
&lt;p&gt;But for a type-checking addict like me, it's close enough. &lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>The Black &amp; White World of Apple Journalism</title><link href="http://muppetgate.github.io/the-black-white-world-of-apple-journalism.html" rel="alternate"></link><updated>2015-05-31T09:36:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-05-31:the-black-white-world-of-apple-journalism.html</id><summary type="html">&lt;p&gt;According to the IT pundits, last week's biggest story was the news that Apple's head-of-all-things-tasteful has been promoted. As the man in charge of UI and industrial design, Sir Jonathan Ive was responsible for the day-to-day running of two Apple divisions. In a promotion that was leaked (strangely) through an &lt;a href="http://www.telegraph.co.uk/technology/apple/11628710/When-Stephen-Fry-met-Jony-Ive-the-self-confessed-fanboi-meets-Apples-newly-promoted-chief-design-officer.html"&gt;in-Telegraph&lt;/a&gt; chat with his good mate Steven Fry, Ive revealed that from July he will be Apple's Chief Design Officer. He'll be doing much the same as he does now, but without having to worry about the operational management stuff. This will free him to focus soley on the thing he loves to do: design. (I can almost hear the wails of Apple's engineering department: 'You want us to fit all of this – into that??')
As well as the existing products such as the iPhone, the Mac, and the Apple Watch, Ive will be blue-skying the future stuff too. He'll also have his eye on the design of the Apple stores (including the furniture, apparently). The day-to-day management of Industrial Design and User Interface Design will be handed over to his newly promoted lieutenants, Richard Howe and Alan Dye:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alan Dye, Jony Ive and Richard Howe. Picture courtesy of the Daily Telegraph" src="http://muppetgate.github.io/assets/images/ive-crew.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;It's a solid move that makes a lot of sense, but it does seem to have the IT press somewhat confused. To begin with there was the odd business of announcing it in the Telegraph, rather than a US journal, and speaking to all-round good egg and unashamed Apple fan Steven Fry, rather than someone like Walt Mossberg.&lt;/p&gt;
&lt;p&gt;Chances are that Apple wanted to keep the whole thing low-key to prevent the sort of uninformed panic we see in the IT press whenever someone in Cupertino blows their nose. Well, if that was Apple's plan it failed miserably.&lt;/p&gt;
&lt;p&gt;Apple reporting tends to be very black-and-white: It is either the end of days, or the second coming; there is no room for any middle ground because the middle-ground doesn't create ad clicks. So on Sir Jony's promotion we have two schools of thought:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ive is being promoted because he wants to leave Apple (bizarre).&lt;/li&gt;
&lt;li&gt;Ive is being promoted so he is free to think lofty designery thoughts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The IT press has spoken: it HAS to be one of those two. The truth, however, is probably somewhere in the middle where page impressions aren't generated.&lt;/p&gt;
&lt;p&gt;For sure, he'll be  guiding the overall design principles for the company as a whole, and he'll also have significant input on new products going forward. In this regard, his role will be very similar to that of Steve Jobs, which, from what I've read, was the plan all along.&lt;/p&gt;
&lt;p&gt;At the same time, he will be laying the groundwork for those who'll take over after him. Not just the two chaps running  his divisions, but the young UI and industrial designers that the company is taking on now. He'll instill the essence of what makes an Apple product difficult to put down once you've taken it off the display stand.&lt;/p&gt;
&lt;p&gt;The IT press has mixed views on what Apple does best: software, chip design, manufacturing technology, battery research and development. There's plenty to choose from.&lt;/p&gt;
&lt;p&gt;In my opinion, what the company does best is succession planning. To the majority of the  press, it was inconceivable that the company would survive after the death of its iconic founder. Some still think it's some sort of abberation that will correct itself any day now. &lt;/p&gt;
&lt;p&gt;The company not only survived, it flourished.&lt;/p&gt;
&lt;p&gt;And so while this promotion is about Ive taking on a more Jobsian role at Apple, it is also about what happens afterwards, though that doesn't mean he's leaving any time soon.&lt;/p&gt;</summary><category term="Apple"></category></entry><entry><title>Microsoft and the Road to OS/2</title><link href="http://muppetgate.github.io/microsoft-and-the-road-to-os2.html" rel="alternate"></link><updated>2015-05-12T07:22:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-05-12:microsoft-and-the-road-to-os2.html</id><summary type="html">&lt;p&gt;Read a great article on &lt;a href="http://arstechnica.co.uk/information-technology/2015/05/android-and-ios-apps-on-windows-what-is-microsoft-doing-and-will-it-work/"&gt;Ars Technica&lt;/a&gt; the other day, which talked about Microsoft's plans to fix the app drought on Windows  by becoming a universal platfrom. The article is well worth a look (along with the comments!), but the gist of it is that Redmond is going to attack the problem from two sides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows for Phones will allow a subset of Android applications to run inside a sandboxed container. What they mean by a 'subset' is anyone's guess right now, but I imagine stuff that needs to run close to the metal will be a non-starter. Microsoft will also be intercepting calls to Google services and replacing them with their own. (Cheeky!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft will be releasing tools to make it easier for developers to port iOS apps to Windows for Phones. Again, we'll have to wait and see what real-world results look like. I'm not a fan of ported apps myself, but if the code was engineered with proper separation of the UI from the engine underneath then Microsoft's tools should make the job easier without impacting  too badly on the user experience. Time will tell.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I first read about this, my initial thought was: &lt;em&gt;How the hell has it come to this?&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;On the surface (no pun intended) this looks like an admission of defeat: &lt;em&gt;No one is writing apps for our platform so we've no choice but to entice developers from Android and iOS.&lt;/em&gt; It's quite a fall for the mighty Microsoft, but it is what it is. I remember a similar feeling when Steve Jobs went on stage and announced that &lt;a href="http://www.mac-history.net/apple-history-tv/2008-07-19/macworld-boston-1997-steve-jobs-returns-bill-gates-appeares-on-screen"&gt;Redmond was Apple's new best friend&lt;/a&gt;. The difference back then was that the Apple faithful were up in arms over the deal; this time round, the mood of  Microsoft fans is something closer to a grumbling acceptance.&lt;/p&gt;
&lt;p&gt;What was, was. This is the reality we're dealing with now, and for tackling that head-on I think Satya Nadella deserves a round of applause.&lt;/p&gt;
&lt;p&gt;Still, the new development strategy isn't without risks, and the elephant-in-the-breakout-area was succintly exposed in the Ars Technica article: Didn't IBM try this with OS/2?&lt;sup id="sf-microsoft-and-the-road-to-os2-1-back"&gt;&lt;a title="A potted history of OS/2 is available here. Well worth a read!" class="simple-footnote" href="#sf-microsoft-and-the-road-to-os2-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Running Windows software on OS/2 was supposed to provide an incentive to IBM's customers. (It runs Windows software, so where's the risk?). What it actually did was discourage native development. (It runs Windows software, why waste effort writing native software for it?)&lt;/p&gt;
&lt;p&gt;I'm sure that Nadella is well aware of OS/2's history, and so I'm sure he is aware of the risks involved in running Android apps in much the same way. Still, needs must – and there is a possible hidden benefit: If successful, would this scheme slow development on iOS? If you could target two successful platforms with your Android app, then why not develop there first? It's a thought for a possible future; Windows on the Phone would need to come close to matching the iOS installed base for that to happen.&lt;/p&gt;
&lt;p&gt;However, Microsoft's first prong – tools to port from iOS – is not your mother's OS/2 strategy. Windows Phone will not be running iOS apps in a subsystem because that would be a disaster for the platform as a whole. The idea is that if iOS developers can port their apps easily then why wouldn’t they? 
Well, supporting a platform is more than just writing code for it. You need to understand its underpinnings to get the best out of it; you need to understand how it interacts with its user and the other applications installed on the phone. You need to understand what could be causing it to crash when the unported code runs fine elsewhere.It'll need a high level of skill to make sure that your ported application doesn't &lt;em&gt;look&lt;/em&gt; like a ported application.&lt;/p&gt;
&lt;p&gt;In short, nothing's changed: You'll still need to a damn good understanding of every platform your app is running on.&lt;/p&gt;
&lt;p&gt;So lots of little things, but it's a start.&lt;/p&gt;
&lt;p&gt;I do wonder, however, if there was an alternative.&lt;/p&gt;
&lt;p&gt;Instead of trying to bring developers to your platform, why not cast your API out to all developers? Microsoft has decades of cross-platform experience which they must be using internally. Why not build the frameworks to run on iOS and Android? For one thing it would be a reward for their own developer community who have waited (not always patiently) for Microsoft to get their mobile act together.&lt;/p&gt;
&lt;hr&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-microsoft-and-the-road-to-os2-1"&gt;A potted history of OS/2 is available &lt;a href="http://techland.time.com/2012/04/02/25-years-of-ibms-os2-the-birth-death-and-afterlife-of-a-legendary-operating-system/"&gt;here&lt;/a&gt;. Well worth a read! &lt;a class="simple-footnote-back" href="#sf-microsoft-and-the-road-to-os2-1-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="Microsoft"></category><category term="Apple"></category><category term="Android"></category></entry><entry><title>The Case of the Missing Case</title><link href="http://muppetgate.github.io/the-case-of-the-missing-case.html" rel="alternate"></link><updated>2015-04-29T06:41:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-04-29:the-case-of-the-missing-case.html</id><summary type="html">&lt;p&gt;Python is a language designed around simplicity. It has relatively few keywords and doesn't support all the latest clever gubbins that you'll find in languages such as Scala and Ruby, which is probably why it is finding great success as an introductory teaching language: a simple syntax that introduces beginnners Though it is missing many of the newer language constructs, Python can still do anything that Ruby and Scala will do; it just might take you a little longer to code, that's all. :-)&lt;/p&gt;
&lt;p&gt;A case (if you'll excuse the expression) in point is the case statement. Most languages, like Java, have one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SwitchDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;January&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;February&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;March&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;April&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;May&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;June&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;July&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;August&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;September&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;October&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;November&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;December&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Invalid month&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And so does Ruby.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Print the eighth month&lt;/span&gt;

&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;January&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;February&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;March&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;April&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;May&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;June&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;July&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;August&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;September&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;October&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;November&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;December&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;month_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Invalid month&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;month_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But Python doesn't.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python's designer wanted to leave out everything that was superfluous, and when you get right down to it, the &lt;code&gt;case&lt;/code&gt; statement is nothing more than a thin veneer over an &lt;code&gt;if...elseif...else&lt;/code&gt; statement. So here's how you do it in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;January&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;February&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;March&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# I&amp;#39;m pretty sure you get the picture ...&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid month&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it's not particulary exciting, but by the same token it also doesn’t hold any nasty surprises. Java's &lt;code&gt;switch...case&lt;/code&gt; statement has copied the peculiar convention from the C language that allows you to fall through to the next case by leaving out the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SwitchDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;January&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;February&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;March&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;April&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="cm"&gt;/* break; */&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;May&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;June&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;July&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;August&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;September&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;October&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;November&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;December&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monthString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Invalid month&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example will give us&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;April
May
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now there are some case where this might be useful, but I can't help thinking that if you want to do something like this then you should be using a different code structure entirely to make it obvious why. Even though &lt;code&gt;switch...case&lt;/code&gt; statements are usually created through repeated copy/pasting, I still run across many cases where a bug is introduced because of a missing &lt;code&gt;break&lt;/code&gt;.
Still, many believe that the Python way of doing things is needlessly verbose, and I suppose it is, which is why I tend to shy away from rambling &lt;code&gt;if...else&lt;/code&gt; structures whenever possible, because in Python (and indeed Ruby) there is a much better way.
If you read that piece I did on my &lt;a href="http://muppetgate.github.io/how-i-came-to-understand-currying.html"&gt;Alfred Date workflow&lt;/a&gt; then you'll know I make heavy use of dictionaries to keep the code tight and maintainable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="n"&gt;month_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;January&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;February&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;March&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;April&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;May&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;June&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;July&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;August&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;September&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;October&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;November&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;December&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;month_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;month_map&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid month&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much neater I'm sure you'll agree.&lt;/p&gt;
&lt;p&gt;That's all very well for printing out simple strings, but the &lt;code&gt;case&lt;/code&gt; statement is often used for executing code. Not a problem with Python (or Ruby for that matter) since the language can pass simple blocks of code around as they were data. Now, I'm going to deliberately overcomplicate things here, so remember it's just a demo!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="n"&gt;month_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;January&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;February&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;March&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;April&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;May&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;June&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;July&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;August&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;September&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;October&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;November&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;December&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;month_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;month_map&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid month&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The change here is that we put the code to be executed (the &lt;code&gt;print&lt;/code&gt;) inside the map, rather than simply supplying a string. The &lt;code&gt;lambda&lt;/code&gt; statement marks the map data as a function that can be executed. Note that we have also added brackets to the &lt;code&gt;month_map[month]&lt;/code&gt; call to indicate that the map entry can be executed as code, and is not simply a data item.
All very wonderful, but there are caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lambda statements can only be single line expressions that return a value. This is why we have imported a specialist print function from Python 3. The standard print function is a simple procedure without a return value.&lt;/li&gt;
&lt;li&gt;You want a more complex function? Then you might need to create a separate &lt;code&gt;def&lt;/code&gt; for each entry in the map, though you can perhaps alleviate this with a bit of judicious &lt;a href="http://muppetgate.github.io/how-i-came-to-understand-currying.html"&gt;currying&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Ruby"></category></entry><entry><title>Lightning is Here to Stay</title><link href="http://muppetgate.github.io/lightning-is-here-to-stay.html" rel="alternate"></link><updated>2015-04-26T23:06:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2015-04-26:lightning-is-here-to-stay.html</id><summary type="html">&lt;p&gt;The press loves to talk about Apple. Whether it's their lastest bit of kit, the price of their latest bit of kit, the number of women serving on their board . . . it doesn't matter. Apple generates hits.&lt;/p&gt;
&lt;p&gt;Trouble is, in their rush to generate ad clicks, the popular IT press not only miss the subtler points, they often miss the plainly obvious.&lt;/p&gt;
&lt;p&gt;In the last week, Apple announced the rather gorgeous &lt;a href="http://www.apple.com/macbook/"&gt;Macbook&lt;/a&gt;, a laptop so thin it ships with shaving foam. Aside from its size and lack of power, the press has also been drawn to the single USB-C port that, in their mind, signifies the end of the lightning interface.&lt;/p&gt;
&lt;p&gt;'Why does Apple need Lightning,' the popular IT press cries, 'when they have something almost as good and a lot more universal like USB-C?' &lt;/p&gt;
&lt;p&gt;Well, I think there are a couple of reasons, the most important of which (to Apple anyway) is size. USB-C is dinky, but the lightning connector is dinkier still.&lt;/p&gt;
&lt;p&gt;&lt;img alt="USB-C and lightning compared" src="http://muppetgate.github.io/assets/images/usb-c_sizecompare.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;And when you're as size-obsessed as Apple, then those few extra millimetres make all the difference. There is also the question of money. Compared to the money it prints selling iPhones, the &lt;a href="https://developer.apple.com/programs/mfi/"&gt;MFI&lt;/a&gt; programme is, no doubt, a drop in the ocean. But to a company as obsessed with detail as Apple, every drop counts.&lt;/p&gt;
&lt;p&gt;Apple recently detailed future plans for the lightning connector at its recent &lt;a href="http://9to5mac.com/2014/11/18/apple-mfi-summit-third-party-products-lightning-port-new-accessories/"&gt;MFI Summit held in China&lt;/a&gt;. The main takeaway was an extension to the programme that will allow third-party vendors to build lightning ports into their own devices. Cupertino also announceed a new low-profile connector which would be suitable for smaller devices such as battery cases.&lt;/p&gt;
&lt;p&gt;And while all this was going on, Apple was heavily involved in defining the USB-C spec, making sure they had a say in what goes at the other end of the cable. &lt;/p&gt;
&lt;p&gt;Lightning is something of a smart cable; to ensure its longevity, Apple made the pin assigments programmable, allowing it to adapt to whatever interface came along in the future. &lt;/p&gt;
&lt;p&gt;So rather than USB-C signalling the end of Lightning, I think it is merely another interface that Lightning was designed to cope with.&lt;/p&gt;</summary><category term="Technology"></category><category term="Apple"></category></entry><entry><title>How I came to understand Currying</title><link href="http://muppetgate.github.io/how-i-came-to-understand-currying.html" rel="alternate"></link><updated>2014-08-01T23:06:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2014-08-01:how-i-came-to-understand-currying.html</id><summary type="html">&lt;p&gt;Okay, it wasn't that I didn't understand the principles; I'd read plenty of articles covering it, looked at lots of code in Groovy and Scala. No, the idea behind currying seemed pretty easy enough: using functions to create functions so that the required parameters can be reduced (by including them as part of the generated function). Yep, all pretty straightforward.&lt;/p&gt;
&lt;p&gt;What I didn't understand was why the hell I'd ever need to do that. What I'd been lacking, all these years, was a decent use case. &lt;/p&gt;
&lt;p&gt;And a few weeks ago, one presented itself from the most unlikely of places: me!&lt;/p&gt;
&lt;p&gt;When I decide I'm going to knuckle down and learn a new programming language, I like to have a crack a simple poject that would have some real-world value. (I've done 'Hello World' apps to death.) Now I'm a big fan of the &lt;a href="http://alfredapp.com"&gt;Alfred&lt;/a&gt; launcher, so I thought I'd have a go at a workflow written in Python. I decided to go for a basic date calculator, as that's something I always seem to need, and I sometimes can't be bothered to go find the iPhone.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dcalc for Alfred" src="http://muppetgate.github.io/assets/images/dcalc0.png" /&gt;&lt;/p&gt;
&lt;p&gt;As well as being able to use dates and times in the calculations, I thought it would be nice if I included a constants (like Christmas, birthays) and variables (Easter, which moves around in ways I cannot begin to fathom). I also thought it would be nice to make easy for folk to add their own functions in the future. To this end, I came up with a simple scheme which did the business using a list of Python functions and a map.&lt;/p&gt;
&lt;p&gt;So we start with the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_easter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_format&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;easter_rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;YEARLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byeaster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;easter_rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_get_current_date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;date_format&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This returns the date that the next Easter Sunday falls on. It takes a date format as a parameter and also returns it, along with the calculated date, when the function exits. We've got a similar function for giving back the current date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_format&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_get_current_date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;date_format&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To expose the functions to the workflow, I simply put them in a map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATE_FUNCTION_MAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;today&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;yesterday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yesterday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tomorrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;easter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;next_easter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The map key acts as the keyword to call the function and supply it to the workflow. When the user types the key, the workflow will pick the function from the map, run it and return the date. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DATE_FUNCTION_MAP&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;date_format_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the function can do anything as long as it takes a date format as a single parameter and returns a date object along with a date format. (And I love the fact that you can return more than one value from a Python function.) 
I was pretty chuffed with the whole setup because it meant I could run clever little calculations like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="dcalc for Alfred" src="http://muppetgate.github.io/assets/images/dcalc1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now the trouble came when a friend asked if I could add another function to the workflow.
'Name it,' I said confidently.
'Well, if I type in a day of the week, could you tell me the next date that it falls on?'
'I reckon so. What if I type "Tue" and the current day is Tuesday?'
'Then I want the date for the next Tuesday.'&lt;/p&gt;
&lt;p&gt;No problem. All I needed was a function that took the day of the week and returned the next occurrence. The only thing was that this function has to take a single parameter (the date format) and return two values (a date object and a date format). So, my first uneducated attempt looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATE_FUNCTION_MAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;today&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;yesterday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yesterday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tomorrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;easter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;next_easter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;mon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;wed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;thu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;sat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;sun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_Sunday&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seven functions, one for each day of the week. It wasn't bad; it did the job, but it just didn’t feel very Pythony. What I was really after was single function that could take a parameter to indicate the day of the week I was looking to process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATE_FUNCTION_MAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;today&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;yesterday&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yesterday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tomorrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;easter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;next_easter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;mon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;wed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;thu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fri&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;sat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;sun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much better to look at , but it wouldn't work; I was now supplying a second parameter, the weekday, which means that when it came to using the function I would be calling a function (because of the parameter list) rather than just supplying one.&lt;/p&gt;
&lt;p&gt;What to do . . .&lt;/p&gt;
&lt;p&gt;And this is when I had my currying epiphany.&lt;/p&gt;
&lt;p&gt;Yes, the &lt;strong&gt;weekday&lt;/strong&gt; function was being called, but what if I used it to generate a function object that carried the correct parameter and return that instead? And I'd finally discovered a use for currying: reducing the required parameter list by returning a function with the extra parameter included.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day_of_week_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This one one is a little bit trickier. We don&amp;#39;t want a separate&lt;/span&gt;
&lt;span class="sd"&gt;    function for each day of the week, so we need to use a bit of&lt;/span&gt;
&lt;span class="sd"&gt;    currying to return a function that can handle the mapping.&lt;/span&gt;
&lt;span class="sd"&gt;    :param day: The day of the week as a string, which we will use to map into a table for the&lt;/span&gt;
&lt;span class="sd"&gt;    calculation.&lt;/span&gt;
&lt;span class="sd"&gt;    :param day_of_week_str: the day of week as a three character string&lt;/span&gt;
&lt;span class="sd"&gt;    :return: a function that will calculate the day of week and return it along with the format&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_weekday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_format&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_get_current_date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;DAY_MAP&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;day_of_week_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt; &lt;span class="n"&gt;date_format&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_weekday&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python you can define and function inside a function and then return it in exactly the same way as you can return a value or an object. Here, I'm returning a function that takes a single &lt;code&gt;date_format&lt;/code&gt; parameter and returns a date object and the same parameter – just as my &lt;code&gt;DATE_FUNCTION_MAP&lt;/code&gt; requires. By handling the day key string (&lt;code&gt;day_of_week_str&lt;/code&gt;) inside the function returned, I've reduced the need for the parameter when the map is used.&lt;/p&gt;</summary><category term="Python"></category><category term="AlfredApp"></category></entry><entry><title>Confessions of a Python addict</title><link href="http://muppetgate.github.io/confessions-of-a-python-addict.html" rel="alternate"></link><updated>2014-07-15T23:06:00+02:00</updated><author><name>MuppetGate</name></author><id>tag:muppetgate.github.io,2014-07-15:confessions-of-a-python-addict.html</id><summary type="html">&lt;p&gt;Hello! Well, this is my first techy blog. I've been in IT for more years than I care to remember, and I've never felt the need to write blog about it. A couple of decades covering C, C++, FoxPro (remember that??) and then Java. I've dabbled in a few small open-source contributions, but I've never felt the urge to blog about this.&lt;/p&gt;
&lt;p&gt;So what changed?&lt;/p&gt;
&lt;p&gt;Well, I discovered Python. &lt;/p&gt;
&lt;p&gt;Actually that's not strictly true; I've been aware of Python for about four or five years, but as soon as I discovered that block structures were defined by indentation, I ran, leaving a me-shaped hole in the wall.&lt;/p&gt;
&lt;p&gt;And so me and Python and kept apart, eyeing each other over the fence. A few more years, a few more languages (Ruby and Scala), and few more frameworks (Spring, Rails, Grails, Play).&lt;/p&gt;
&lt;p&gt;I'm not saying that all of this soft tech wasn't great, but I was getting jaded. I longed for simplicity and clarity. And when you hear of simplicity and clarity, then in the next sentence you usually hear Python.&lt;/p&gt;
&lt;p&gt;So I gave it another go; a real project this time, not just a bit of dabbling; I had a go at a real project: an &lt;a href="http://alfredapp.com"&gt;Alfred &lt;/a&gt; workflow written in Python. After about an hour of reading and three hours programming, I realised something:&lt;/p&gt;
&lt;h3&gt;Indentations aren't weird&lt;/h3&gt;
&lt;p&gt;They actually make a lot of sense. Superfluous elements such as {} and IF . . . ENDIF are removed from your code, revealing just the structure. After working with Python for just a few minutes, semantic indents became a lot more familiar and much easier to read.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;. . .&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subtitle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ICON_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subtitle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Copy to clipboard&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The indentation has to be consistent; if you indent by 4 spaces then all your indentation has to be based on 4 spaces (which kind of makes sense. Why would you suddenly start indenting with 3 spaces halfway through the file?). I'll admit it was a pain at first, but as I said, this was only for the first few minutes. Afterwards, I became obessessed with neatness. If the code made the indentation sink to the right side of the page, I thought &lt;em&gt;'Python! Pffft!'&lt;/em&gt;, and then I thought &lt;em&gt;'. . . or maybe I should break this down into functions to make it neater.'&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Python is a better teaching language than Java&lt;/h3&gt;
&lt;p&gt;There, I said it. And look, the sky hasn't fallen. Sorry, but it's true. Java is great for teaching object-oriented fundamentals, but before a programming student reaches that, he has to understand good practices in structure and abstraction. This is where Python excels because the semantic indentation &lt;em&gt;forces&lt;/em&gt; good structure. Why? Simply because your code will look damn ugly otherwise.&lt;/p&gt;
&lt;h3&gt;The free stuff is amazing&lt;/h3&gt;
&lt;p&gt;Yes, more libraries than you can shake a stick at, and all the free. As many as Java? I dunno, maybe. I'm just going to call out one or two of my favourites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://fdik.org/pyPEG/"&gt;pyPeg&lt;/a&gt; – The best way to parse complex stuff coming in from a file or the command line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://labix.org/python-dateutil"&gt;DateUtil&lt;/a&gt; – Python's standard date-handling framework is awesome enough. Adding the DateUtil framework handling any kind of date problem ridiculously easy. I mean, how many frameworks bother to tell when Easter's coming around.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;And so is the online community&lt;/h3&gt;
&lt;p&gt;To be honest, I've never come across a geek pool I didn't like, but the folk who know Python &lt;em&gt;really&lt;/em&gt; know Python, and the they're always ready to help with the dumbest questions (of which I had plenty!)  &lt;/p&gt;</summary><category term="Python"></category></entry></feed>